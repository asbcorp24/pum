// SPDX-FileCopyrightText: 2024 Cesanta Software Limited
// SPDX-License-Identifier: GPL-2.0-only or commercial
// Generated by Mongoose Wizard, https://mongoose.ws/wizard/

// Default mock implementation of the API callbacks

//#include "mongoose_glue.h"
//#include "../src/utils/ConfigManager.h"  
/*#ifdef ARDUINO
#ifdef INADDR_NONE
#undef INADDR_NONE
#endif
#endif
extern ConfigManager cfgManager; 
static struct wifi s_wifi = {"pass", "name"};
void glue_get_wifi(struct wifi *data) {
  *data = s_wifi;  // Sync with your device
}

void glue_get_wifi(struct wifi *data) {
  // копируем из cfgManager
  String ssid = cfgManager.savedSSID;
  String pass = cfgManager.savedPassword;
  // убедимся, что строки не длиннее полей:
  strncpy(data->sid, ssid.c_str(), sizeof(data->sid)-1);
  data->sid[sizeof(data->sid)-1] = '\0';
  strncpy(data->passw, pass.c_str(), sizeof(data->passw)-1);
  data->passw[sizeof(data->passw)-1] = '\0';
}

void glue_set_wifi(struct wifi *data) {
  s_wifi = *data; // Sync with your device
}

void glue_set_wifi(struct wifi *data) {
  // сохраняем в cfgManager и в Preferences
  cfgManager.saveWiFiCredentials(String(data->sid), String(data->passw));
  cfgManager.commit(); // или как у вас называется сброс в флеш
  glue_update_state(); // чтобы UI обновился
}*/
/*
static struct mqtt s_mqtt = {"password", "login", "demo"};
void glue_get_mqtt(struct mqtt *data) {
  *data = s_mqtt;  // Sync with your device
}
void glue_set_mqtt(struct mqtt *data) {
  s_mqtt = *data; // Sync with your device
}

static struct rs485 s_rs485 = {12};
void glue_get_rs485(struct rs485 *data) {
  *data = s_rs485;  // Sync with your device
}
void glue_set_rs485(struct rs485 *data) {
  s_rs485 = *data; // Sync with your device
}

static struct uchet s_uchet = {42};
void glue_get_uchet(struct uchet *data) {
  *data = s_uchet;  // Sync with your device
}
void glue_set_uchet(struct uchet *data) {
  s_uchet = *data; // Sync with your device
}

static struct rest s_rest = {42, 42};
void glue_get_rest(struct rest *data) {
  *data = s_rest;  // Sync with your device
}
void glue_set_rest(struct rest *data) {
  s_rest = *data; // Sync with your device
}
*/
// SPDX-FileCopyrightText: 2024 Cesanta Software Limited
// SPDX-License-Identifier: GPL-2.0-only or commercial
// Generated by Mongoose Wizard, https://mongoose.ws/wizard/
#include "mongoose.h"               // подключаем mongoose вначале
#ifdef INADDR_NONE
#undef INADDR_NONE
#endif
#include "mongoose_glue.h"
#include "../src/utils/ConfigManager.h"  
  
 
 
extern ConfigManager cfgManager; 

void glue_get_wifi(struct wifi *data) {
  cfgManager.getWiFiCredentials();
  strncpy(data->sid, cfgManager.savedSSID.c_str(), sizeof(data->sid) - 1);
  data->sid[sizeof(data->sid) - 1] = '\0';
  strncpy(data->passw, cfgManager.savedPassword.c_str(), sizeof(data->passw) - 1);
  data->passw[sizeof(data->passw) - 1] = '\0';
}

void glue_set_wifi(struct wifi *data) {
  cfgManager.saveWiFiCredentials(String(data->sid), String(data->passw));
  cfgManager.commit();
  glue_update_state();
}

void glue_get_mqtt(struct mqtt *data) {
  strncpy(data->url, cfgManager.getMQTTServer().c_str(), sizeof(data->url) - 1);
  data->url[sizeof(data->url) - 1] = '\0';
  strncpy(data->login, cfgManager.getMQTTUser().c_str(), sizeof(data->login) - 1);
  data->login[sizeof(data->login) - 1] = '\0';
  strncpy(data->password, cfgManager.getMQTTPass().c_str(), sizeof(data->password) - 1);
  data->password[sizeof(data->password) - 1] = '\0';
}

void glue_set_mqtt(struct mqtt *data) {
  cfgManager.saveMQTTServer(data->url);
  cfgManager.saveMQTTUser(data->login);
  cfgManager.saveMQTTPass(data->password);
  cfgManager.commit();
  glue_update_state();
}

void glue_get_rs485(struct rs485 *data) {
  data->id = atoi(cfgManager.getClientID().c_str());
}

void glue_set_rs485(struct rs485 *data) {
  cfgManager.saveRS485ID(String(data->id));
  cfgManager.commit();
  glue_update_state();
}

void glue_get_uchet(struct uchet *data) {
  data->kf = atof(cfgManager.getMQTTUser().c_str());  // Пример: используем как kf значение mqtt_user
}

void glue_set_uchet(struct uchet *data) {
  cfgManager.saveMQTTUser(String(data->kf, 2));  // Пример: сохраняем kf как mqtt_user (или можно сделать свой ключ)
  cfgManager.commit();
  glue_update_state();
}

void glue_get_rest(struct rest *data) {
  strncpy(data->url, cfgManager.getRESTURL().c_str(), sizeof(data->url) - 1);
  data->url[sizeof(data->url) - 1] = '\0';
  strncpy(data->token, "your_token_here", sizeof(data->token) - 1);  // Пока захардкожено
  data->token[sizeof(data->token) - 1] = '\0';
}

void glue_set_rest(struct rest *data) {
  cfgManager.saveRESTURL(String(data->url));
  cfgManager.commit();
  glue_update_state();
}
